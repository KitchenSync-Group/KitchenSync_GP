from app.models.meal_plan import MealPlan
from app.models.recipe import Recipe
from app.database import db_session
import datetime

def get_user_meal_plans(user_id):
    """Get all meal plans for a user"""
    return MealPlan.query.filter_by(user_id=user_id).all()

def get_meal_plan(plan_id, user_id=None):
    """Get a specific meal plan"""
    query = MealPlan.query.filter_by(id=plan_id)
    if user_id:
        query = query.filter_by(user_id=user_id)
    return query.first()

def get_meal_plans_by_date_range(user_id, start_date, end_date):
    """Get meal plans within a date range"""
    return MealPlan.query.filter(
        MealPlan.user_id == user_id,
        MealPlan.meal_date >= start_date,
        MealPlan.meal_date <= end_date
    ).all()

def add_meal_plan(user_id, recipe_id, meal_date, meal_type, notes=None):
    """Add a new meal plan"""
    # Validate recipe exists
    recipe = Recipe.query.get(recipe_id)
    if not recipe:
        return None, "Recipe not found"
    
    # Create meal plan
    meal_plan = MealPlan(
        user_id=user_id,
        recipe_id=recipe_id,
        meal_date=meal_date,
        meal_type=meal_type,
        notes=notes
    )
    
    db_session.add(meal_plan)
    db_session.commit()
    
    return meal_plan, "Meal plan added successfully"

def update_meal_plan(plan_id, user_id, **kwargs):
    """Update a meal plan"""
    meal_plan = get_meal_plan(plan_id, user_id)
    if not meal_plan:
        return None, "Meal plan not found"
    
    # Update fields
    for key, value in kwargs.items():
        if hasattr(meal_plan, key):
            setattr(meal_plan, key, value)
    
    meal_plan.updated_at = datetime.datetime.utcnow()
    db_session.commit()
    
    return meal_plan, "Meal plan updated successfully"

def delete_meal_plan(plan_id, user_id):
    """Delete a meal plan"""
    meal_plan = get_meal_plan(plan_id, user_id)
    if not meal_plan:
        return False, "Meal plan not found"
    
    db_session.delete(meal_plan)
    db_session.commit()
    
    return True, "Meal plan deleted successfully"

def get_meal_plans_by_date(user_id, date):
    """Get all meal plans for a specific date"""
    return MealPlan.query.filter_by(user_id=user_id, meal_date=date).all()

def get_meal_plans_by_week(user_id, date):
    """Get all meal plans for the week containing the given date"""
    # Calculate the start of the week (Monday)
    start_of_week = date - datetime.timedelta(days=date.weekday())
    # Calculate the end of the week (Sunday)
    end_of_week = start_of_week + datetime.timedelta(days=6)
    
    return get_meal_plans_by_date_range(user_id, start_of_week, end_of_week)

def get_meal_plans_by_month(user_id, year, month):
    """Get all meal plans for a specific month"""
    start_date = datetime.date(year, month, 1)
    
    # Calculate the last day of the month
    if month == 12:
        end_date = datetime.date(year + 1, 1, 1) - datetime.timedelta(days=1)
    else:
        end_date = datetime.date(year, month + 1, 1) - datetime.timedelta(days=1)
    
    return get_meal_plans_by_date_range(user_id, start_date, end_date)